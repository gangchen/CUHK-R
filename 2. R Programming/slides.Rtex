\documentclass[UTF8]{beamer}
\usepackage{graphicx, color}
\usepackage{zhspacing}
\usetheme{JuanLesPins}
\usepackage{fontspec}
\setsansfont{Microsoft YaHei}

\usepackage{enumerate}

\AtBeginSection[]{
	\frame{
		\frametitle{Next}
		\tableofcontents[currentsection, subsectionstyle=show/shaded/hide]
	}
}

\title{R for Bioinformatics}
\subtitle{Introduction, Programming, Data Analysis and Visualization\\
R Programming}
\author{Gang Chen \\ chengang@bgitechsolutions.com}

\begin{document}

\begin{frame}
\titlepage  
\end{frame}

\begin{frame}
\frametitle{Outline}
\tableofcontents[hideallsubsections]
\end{frame}

\section{Data Types}
\begin{frame}[fragile]
\frametitle{Class, Type and Dimension}
\begin{block}{Class, Type and Dimension}
Everything in R is a object, every object has \textit{class}, \textit{type} and \textit{dimension}.
%% begin.rcode, eval=F
% class(obj)
% typeof(obj)
% dim(obj)
%% end.rcode
\end{block}
\end{frame}

\begin{frame}[fragile]
\tiny
\frametitle{Data Types}
\begin{columns}
\begin{column}{.5\textwidth}
%% begin.rcode, echo=F, results=F, warning=F, message=F
% library(GenomicRanges)
%% end.rcode
%% begin.rcode
% obj <- 1
% class(obj)
% obj <- "Gang Chen"
% class(obj)
% obj <- 1:3
% class(obj)
% ranges <- GRanges(seqnames = c("chr1", "chr2"), 
% ranges = IRanges(start = c(1013, 4351), 
% end = c(2314, NA), width = c(NA, 1)), 
% strand = c("+", "-"))
% class(ranges)
%% end.rcode
\end{column}
\begin{column}{.5\textwidth}
%% begin.rcode
% class(list(a = 1, b = 2))
% class(matrix(1:16, ncol=4))
% class(array(1:64, c(4,4,4)))
% obj <- as.data.frame(obj)
% class(obj)
% obj <- as.factor(c("male", "female"))
% class(obj)
%% end.rcode
\end{column}
\end{columns}
\end{frame}

\subsection{Numeric}
\begin{frame}[fragile]
\frametitle{Types}
%% begin.rcode, tidy=F, highlight=F
% obj <- 1
% class(obj)
% obj <- 1:3
% class(obj)
% obj <- 1+2i
% class(obj)
%% end.rcode
\end{frame}

\begin{frame}[fragile]
\frametitle{Operations}
\begin{block}{Operators}
\begin{itemize}
\item 
%% begin.rcode, eval=F
% +, -, *, /, ==, =, <-
%% end.rcode
\item
%% begin.rcode, eval=F
% ^
%% end.rcode
\item 
%% begin.rcode, eval=F
% exp(), log(), log10(), log2()
%% end.rcode
\item
%% begin.rcode, eval=F
% sqrt(), abs(), sin(), cos()
%% end.rcode, eval=F
\item 
%% begin.rcode, eval=F
% round(), floor(), ceriling()
%% end.rcode
\item
%% begin.rcode, eval=F
% factorial()
%% end.rcode
\end{itemize}
\end{block}
\end{frame}

\subsection{Character}
\begin{frame}[fragile]
\begin{block}{Character}
A character object is used to represent string values in R. 
\end{block}
\begin{columns}
\begin{column}{.5\textwidth}
%% begin.rcode
% fname <- "Gang"
% lname <- "Chen"
% class(fname)
%% end.rcode
\end{column}
\begin{column}{.5\textwidth}
%% begin.rcode
% myPI <- 3.14
% class(myPI)
% myPI <- as.character(myPI)
% class(myPI)
%% end.rcode
\end{column}
\end{columns}
\end{frame}

\begin{frame}[fragile]
\frametitle{Character Operators}
%% begin.rcode
% paste(fname, lname)
% substr("I am learning R", start=6, stop=13)
% sub("I am", "We are", "I am learning R")
%% end.rcode
\end{frame}

\begin{frame}[fragile]
\frametitle{Regular Expression}
\begin{block}{Regular Expressions == Problem}
\huge
Some people,\\
\large
when confronted with a problem, \\
\huge
think "I know, I'll use \textbf{regular expressions.}"\\
Now they have \textbf{two} problems.
\end{block} 
\end{frame}

\begin{frame}[fragile]
\frametitle{Regular Expression in R}
\begin{block}{Regular Expression Functions}
%% begin.rcode, eval=F
% help(regex)
% grep(), grepl(), regexpr(), gregexpr(), sub(), gsub()
%% end.rcode
\end{block}
\begin{block}{Example}
%% begin.rcode
% grep("a.", c("Gang","Chen","aab", "Ag","ga"))
%% end.rcode
\end{block}
\end{frame}

\begin{frame}[fragile]
\frametitle{Logical}
%% begin.rcode
% u = TRUE; v = FALSE
% u & v # u AND v
% u | v # u OR v
% !u # negation of u
%% end.rcode
\end{frame}

\begin{frame}[fragile]
\begin{block}{?}
\begin{columns}
\begin{column}{.5\textwidth}
%% begin.rcode
% 4.3 - 0.7
% 4.3 - 0.7 == 3.6
% 0.7 + 3.6 == 4.3
%% end.rcode
\end{column}
\begin{column}{.5\textwidth}
%% begin.rcode
% 4.2 / 6
% 0.7 * 6
% 4.2 / 6 == 0.7
%% end.rcode
\end{column}
\end{columns}
\end{block}
\end{frame}

\subsection{Vector}
\begin{frame}[fragile]
\begin{block}{Vector}
A \textbf{vector} is a sequence of data elements of the same basic type.
%% begin.rcode
% a = c(1,2,3)
% b = c(T, F, F, T)
% chars = c("Gang", "Chen", "AA", "Aa","aB")
%% end.rcode
\end{block}
\end{frame}

\begin{frame}[fragile]
Arithmetic operations of vectors are performed memberwise.
\begin{block}{All operators are applied to vectors}
%% begin.rcode
% a^2
% !b
% grep("a.",chars)
%% end.rcode
\end{block}
\end{frame}

\begin{frame}[fragile]
\begin{block}{Vector Arithmetic}
\begin{columns}
\begin{column}{.5\textwidth}
%% begin.rcode
% a = c(1,2,3,4,5)
% b = c(5,4,3,2,1)
% c(a, b)
% a + b
% a * b
%% end.rcode
\end{column}
\begin{column}{.5\textwidth}
Recycling Rule:
%% begin.rcode
% d = c(1,2)
% a + d
%% end.rcode
\end{column}
\end{columns}
\end{block}
\end{frame}

\begin{frame}[fragile]
\begin{block}{Vector Index}
%% begin.rcode
% a = c("one", "two", "three", "four", "five")
% a[3]
% a[2:4]
% a[-3]
% a[8]
%% end.rcode
\end{block}
\end{frame}

\subsection{Matrix and Array}
\begin{frame}[fragile]
\frametitle{Matrix Construction}
%% begin.rcode
% mat = matrix(1:24, ncol=6, nrow=4, byrow=T)
% mat
%% end.rcode
\end{frame}

\begin{frame}[fragile]
\frametitle{Matrix Index}
\begin{columns}
\begin{column}{.5\textwidth}
%% begin.rcode
% mat[3,3]
% mat[2,]
% mat[,4]
%% end.rcode
\end{column}
\begin{column}{.5\textwidth}
%% begin.rcode
% mat[2:3, 3:4]
% dim(mat)
% ncol(mat)
% nrow(mat)
%% end.rcode
\end{column}
\end{columns}
\end{frame}

\begin{frame}[fragile]
%% begin.rcode, echo=F
% A = matrix(1:16, ncol=4)
% B = matrix(1:16, ncol=4)
%% end.rcode
\frametitle{Matrix  Arithmetic}
\begin{columns}
\begin{column}{.5\textwidth}
%% begin.rcode
% A
% A * B
%% end.rcode
\end{column}
\begin{column}{.5\textwidth}
%% begin.rcode
% B
% A %*% B
%% end.rcode
\end{column}
\end{columns}
\end{frame}

\subsection{List}
\begin{frame}[fragile]
\frametitle{List}
A list is a generic vector containing other objects.
\begin{columns}
\begin{column}{.5\textwidth}
%% begin.rcode
% n = c(2, 3, 5) 
% s = c("aa", "bb", "cc", "dd", "ee") 
% b = c(TRUE, FALSE, TRUE, FALSE, FALSE) 
% x = list(n, s, b, 3)
%% end.rcode
\end{column}
\begin{column}{.5\textwidth}
%% begin.rcode
% x
%% end.rcode
\end{column}
\end{columns}
\end{frame}

\begin{frame}[fragile]
\frametitle{List Slice}
%% begin.rcode
% x[1]
% x[c(2,4)]
%% end.rcode
\end{frame}

\begin{frame}[fragile]
\frametitle{List Member}
%% begin.rcode
% x[[3]]
% x[3]
%% end.rcode
\end{frame}

\subsection{Data Frame}

\begin{frame}[fragile]
\frametitle{Data Frame}
A data frame is used for storing data tables. It is a list of vectors of equal length.
%% begin.rcode
% head(mtcars)
%% end.rcode
\end{frame}

\begin{frame}[fragile]
\frametitle{Data Frame}
%% begin.rcode
% mtcars[1,2]
% mtcars["Mazda RX4", "wt"]
% ncol(mtcars)
% nrow(mtcars)
% colnames(mtcars)
% rownames(mtcars)
%% end.rcode
\end{frame}

\subsection{Factor}
\begin{frame}[fragile]
\frametitle{Factor}
%% begin.rcode
% gender <- c("male", "female")
% class(gender)
% gender <- as.factor(gender)
% class(gender)
%% end.rcode
\end{frame}

\begin{frame}[fragile]
\frametitle{Factor}
%% begin.rcode
% group <- c(1, 2)
% group[1] < group[2]
% class(group)
% group <- as.factor(group)
% group[1] < group[2]
% class(group)
%% end.rcode
\end{frame}

\section{Programming Structures}
\subsection{Control Statements}
\begin{frame}[fragile]
\frametitle{If else}
%% begin.rcode, eval=F
% if(something){
%       # do something
% }else if(something){
%       # do something
%}else{
%       # do something
%}
%% end.rcode
\end{frame}

\begin{frame}[fragile]
\frametitle{ifelse}
%% begin.rcode, eval=F
% ifelse(test, yes, no)
%% end.rcode

%% begin.rcode
% a <- c(2,3,4,2,5,6,7,12)
% ifelse(a%%2==0, a+1, 0)
%% end.rcode
\end{frame}

\begin{frame}[fragile]
\frametitle{Loop}
%% begin.rcode, eval=F
% for (var in seq) expr
% while(cond) expr
% repeat
% break
% next
%% end.rcode
\end{frame}

\begin{frame}[fragile]
\frametitle{Loop}
%% begin.rcode
% for(i in a){
%   if(i %% 2 == 0){
%     print(i + 1)
%   }else{
%     print(0)
%   }
% }
%
% end.rcode
\end{frame}

\begin{frame}[fragile]
\frametitle{\textit{apply} functions}
%% begin.rcode, eval=F
% apply()
% lapply()
% sapply()
% tapply()
%% end.rcode
\end{frame}

\subsection{Function}
\begin{frame}[fragile]
\frametitle{Function}
%% begin.rcode
% add <- function(a, b){
%   a+b
%}
% add(1, 2)
% sapply(1:8, add, 3)
%% end.rcode
\end{frame}

\begin{frame}[fragile]
\frametitle{Anonymous Function}
%% begin.rcode
% sapply(1:8, function(a, b){a+b}, 3)
%% end.rcode
\end{frame}

\section{Object-Oriented Programming}
\subsection{History}
\begin{frame}
\frametitle{S4 Classes and methods}
\begin{block}{History}
\begin{itemize}
\item 1976, Rick Becker and John Chambers, S on Honeywell OS
\item Ported to UNIX, S2
\item Around 1986, functional programming and object self-description, S3
\item 1992, concept of classes and methods, S4
\item 2010, Reference Classes (RC), R 2.12
\end{itemize}
appendix in \textit{Software for Data Analysis} by Chambers
\end{block}
\end{frame}

\begin{frame}
\frametitle{S4 Classes and methods}
\begin{block}{OO Systems in R}
\begin{itemize}
\item S3
\item S4
\item RC
\item Base Types
\end{itemize}
Best Reference: http://adv-r.had.co.nz/OO-essentials.html
\end{block}
\end{frame}

\subsection{S3}
\begin{frame}
\frametitle{S3}
%% begin.rcode
%% end.rcode
\end{frame}

\subsection{S4}
\begin{frame}[fragile]
\frametitle{S4 Classes and methods}
\begin{block}{S4 in R}
\scriptsize
%% begin.rcode
% library(stats4)
% library(pryr)
% y <- c(26, 17, 13, 12, 20, 5, 9, 8, 5, 4, 8)
% nLL <- function(lambda) -sum(dpois(y, lambda, log = TRUE))
% fit <- mle(nLL, start = list(lambda = 5), nobs = length(y))
% isS4(fit)
% otype(fit)
% isS4(nobs)
% ftype(nobs)
% mle_nobs <- method_from_call(nobs(fit))
% isS4(mle_nobs)
% ftype(mle_nobs)
%% end.rcode
\end{block}
\end{frame}

\begin{frame}[fragile]
\frametitle{S4 Classes and methods}
\begin{block}{Defining classes and creating objects}
\small
%% begin.rcode, eval=F
% setClass("Person", 
%  slots = list(name = "character", age = "numeric"))
% setClass("Employee", 
%  slots = list(boss = "Person"), 
%  contains = "Person")
%
% alice <- new("Person", name = "Alice", age = 40)
% john <- new("Employee", name = "John", age = 20, boss = alice)
%% end.rcode
\end{block}
\end{frame}

\begin{frame}[fragile]
\frametitle{S4 Classes and methods}
\begin{block}{access slots of an S4 object }
%% begin.rcode, eval=F
% alice@age
% slot(john, "boss")
%% end.rcode
\end{block}
\end{frame}

\begin{frame}[fragile]
\frametitle{S4 Classes and methods}
\begin{block}{Creating new methods and generics}
\small
%% begin.rcode, eval=F
% setGeneric("union")
% setMethod("union", 
%  c(x = "data.frame", y = "data.frame"), 
%  function(x, y) {
%    unique(rbind(x, y))
%  }
% )
% setGeneric("myGeneric", function(x) {
%  standardGeneric("myGeneric")
% })
%% end.rcode
\end{block}
\end{frame}


\section{Input and Output}
\subsection{Standard Input and Output}
\begin{frame}[fragile]
\frametitle{Standard I/O}
%% begin.rcode,eval=F
% scan()
% print()
% cat()
%% end.rcode
\end{frame}
\subsection{File Input and Output}
\begin{frame}[fragile]
\frametitle{File I/O}
\begin{columns}
\begin{column}{.5\textwidth}
\begin{block}{Input}
%% begin.rcode, eval=F
% read.table()
% readLines()
% readChar()
% readBin()
% scan()
%% end.rcode
\end{block}
\end{column}
\begin{column}{.5\textwidth}
\begin{block}{Output}
%% begin.rcode, eval=F
% write.table()
% write()
%% end.rcode
\end{block}
\end{column}
\end{columns}
\end{frame}
\subsection{Database Input and Output}
\begin{frame}[fragile]
\frametitle{Database I/O}
%% begin.rcode, eval=F
% library(RMySQL) # for MySQL
% library(RPostgreSQL) # for PostgreSQL
% library(XLConnect) # for Excel
%% end.rcode
\end{frame}
\end{document}
